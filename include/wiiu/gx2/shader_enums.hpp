#pragma once

#include <wiiu/types.h>

#define CF_INST_LIST \
	CF_INST_VAL(NOP, 0x00) \
	CF_INST_VAL(TEX, 0x01) \
	CF_INST_VAL(VTX, 0x02) \
	CF_INST_VAL(VTX_TC, 0x03) \
	CF_INST_VAL(LOOP_START, 0x04) \
	CF_INST_VAL(LOOP_END, 0x05) \
	CF_INST_VAL(LOOP_START_DX10, 0x06) \
	CF_INST_VAL(LOOP_START_NO_AL, 0x07) \
	CF_INST_VAL(LOOP_CONTINUE, 0x08) \
	CF_INST_VAL(LOOP_BREAK, 0x09) \
	CF_INST_VAL(JUMP, 0x0A) \
	CF_INST_VAL(PUSH, 0x0B) \
	CF_INST_VAL(PUSH_ELSE, 0x0C) \
	CF_INST_VAL(ELSE, 0x0D) \
	CF_INST_VAL(POP, 0x0E) \
	CF_INST_VAL(POP_JUMP, 0x0F) \
	CF_INST_VAL(POP_PUSH, 0x10) \
	CF_INST_VAL(POP_PUSH_ELSE, 0x11) \
	CF_INST_VAL(CALL, 0x12) \
	CF_INST_VAL(CALL_FS, 0x13) \
	CF_INST_VAL(RETURN, 0x14) \
	CF_INST_VAL(EMIT_VERTEX, 0x15) \
	CF_INST_VAL(EMIT_CUT_VERTEX, 0x16) \
	CF_INST_VAL(CUT_VERTEX, 0x17) \
	CF_INST_VAL(KILL, 0x18) \
	CF_INST_VAL(END_PROGRAM, 0x19) \
	CF_INST_VAL(WAIT_ACK, 0x1A) \
	CF_INST_VAL(TEX_ACK, 0x1B) \
	CF_INST_VAL(VTX_ACK, 0x1C) \
	CF_INST_VAL(VTX_TC_ACK, 0x1D)

#define CF_EXP_INST_LIST \
	CF_EXP_INST_VAL(MEM_STREAM0, 0x20) \
	CF_EXP_INST_VAL(MEM_STREAM1, 0x21) \
	CF_EXP_INST_VAL(MEM_STREAM2, 0x22) \
	CF_EXP_INST_VAL(MEM_STREAM3, 0x23) \
	CF_EXP_INST_VAL(MEM_SCRATCH, 0x24) \
	CF_EXP_INST_VAL(MEM_REDUCTION, 0x25) \
	CF_EXP_INST_VAL(MEM_RING, 0x26) \
	CF_EXP_INST_VAL(EXP, 0x27) \
	CF_EXP_INST_VAL(EXP_DONE, 0x28) \
	CF_EXP_INST_VAL(MEM_EXPORT, 0x3A)

#define CF_ALU_INST_LIST \
	CF_ALU_INST_VAL(ALU, 0x08) \
	CF_ALU_INST_VAL(ALU_PUSH_BEFORE, 0x09) \
	CF_ALU_INST_VAL(ALU_POP_AFTER, 0x0A) \
	CF_ALU_INST_VAL(ALU_POP2_AFTER, 0x0B) \
	CF_ALU_INST_VAL(ALU_EXT, 0x0C) \
	CF_ALU_INST_VAL(ALU_CONTINUE, 0x0D) \
	CF_ALU_INST_VAL(ALU_BREAK, 0x0E) \
	CF_ALU_INST_VAL(ALU_ELSE_AFTER, 0x0F)

#define ALU_OP2_LIST \
	ALU_OP2_VAL(ADD, 0x00, 2) \
	ALU_OP2_VAL(MUL, 0x01, 2) \
	ALU_OP2_VAL(MUL_IEEE, 0x02, 2) \
	ALU_OP2_VAL(MAX, 0x03, 2) \
	ALU_OP2_VAL(MIN, 0x04, 2) \
	ALU_OP2_VAL(MAX_DX10, 0x05, 2) \
	ALU_OP2_VAL(MIN_DX10, 0x06, 2) \
	ALU_OP2_VAL(FREXP_64, 0x07, 1) \
	ALU_OP2_VAL(SETE, 0x08, 2) \
	ALU_OP2_VAL(SETGT, 0x09, 2) \
	ALU_OP2_VAL(SETGE, 0x0A, 2) \
	ALU_OP2_VAL(SETNE, 0x0B, 2) \
	ALU_OP2_VAL(SETE_DX10, 0x0C, 2) \
	ALU_OP2_VAL(SETGT_DX10, 0x0D, 2) \
	ALU_OP2_VAL(SETGE_DX10, 0x0E, 2) \
	ALU_OP2_VAL(SETNE_DX10, 0x0F, 2) \
	ALU_OP2_VAL(FRACT, 0x10, 1) \
	ALU_OP2_VAL(TRUNC, 0x11, 1) \
	ALU_OP2_VAL(CEIL, 0x12, 1) \
	ALU_OP2_VAL(RNDNE, 0x13, 1) \
	ALU_OP2_VAL(FLOOR, 0x14, 1) \
	ALU_OP2_VAL(MOVA, 0x15, 1) \
	ALU_OP2_VAL(MOVA_FLOOR, 0x16, 1) \
	ALU_OP2_VAL(ADD_64, 0x17, 2) \
	ALU_OP2_VAL(MOVA_INT, 0x18, 1) \
	ALU_OP2_VAL(MOV, 0x19, 1) \
	ALU_OP2_VAL(NOP, 0x1A, 0) \
	ALU_OP2_VAL(MUL_64, 0x1B, 2) \
	ALU_OP2_VAL(FLT64_TO_FLT32, 0x1C, 1) \
	ALU_OP2_VAL(FLT32_TO_FLT64, 0x1D, 1) \
	ALU_OP2_VAL(PRED_SETGT_UINT, 0x1E, 2) \
	ALU_OP2_VAL(PRED_SETGE_UINT, 0x1F, 2) \
	ALU_OP2_VAL(PRED_SETE, 0x20, 2) \
	ALU_OP2_VAL(PRED_SETGT, 0x21, 2) \
	ALU_OP2_VAL(PRED_SETGE, 0x22, 2) \
	ALU_OP2_VAL(PRED_SETNE, 0x23, 2) \
	ALU_OP2_VAL(PRED_SET_INV, 0x24, 2) \
	ALU_OP2_VAL(PRED_SET_POP, 0x25, 2) \
	ALU_OP2_VAL(PRED_SET_CLR, 0x26, 2) \
	ALU_OP2_VAL(PRED_SET_RESTORE, 0x27, 2) \
	ALU_OP2_VAL(PRED_SETE_PUSH, 0x28, 2) \
	ALU_OP2_VAL(PRED_SETGT_PUSH, 0x29, 2) \
	ALU_OP2_VAL(PRED_SETGE_PUSH, 0x2A, 2) \
	ALU_OP2_VAL(PRED_SETNE_PUSH, 0x2B, 2) \
	ALU_OP2_VAL(KILLE, 0x2C, 2) \
	ALU_OP2_VAL(KILLGT, 0x2D, 2) \
	ALU_OP2_VAL(KILLGE, 0x2E, 2) \
	ALU_OP2_VAL(KILLNE, 0x2F, 2) \
	ALU_OP2_VAL(AND_INT, 0x30, 2) \
	ALU_OP2_VAL(OR_INT, 0x31, 2) \
	ALU_OP2_VAL(XOR_INT, 0x32, 2) \
	ALU_OP2_VAL(NOT_INT, 0x33, 1) \
	ALU_OP2_VAL(ADD_INT, 0x34, 2) \
	ALU_OP2_VAL(SUB_INT, 0x35, 2) \
	ALU_OP2_VAL(MAX_INT, 0x36, 2) \
	ALU_OP2_VAL(MIN_INT, 0x37, 2) \
	ALU_OP2_VAL(MAX_UINT, 0x38, 2) \
	ALU_OP2_VAL(MIN_UINT, 0x39, 2) \
	ALU_OP2_VAL(SETE_INT, 0x3A, 2) \
	ALU_OP2_VAL(SETGT_INT, 0x3B, 2) \
	ALU_OP2_VAL(SETGE_INT, 0x3C, 2) \
	ALU_OP2_VAL(SETNE_INT, 0x3D, 2) \
	ALU_OP2_VAL(SETGT_UINT, 0x3E, 2) \
	ALU_OP2_VAL(SETGE_UINT, 0x3F, 2) \
	ALU_OP2_VAL(KILLGT_UINT, 0x40, 2) \
	ALU_OP2_VAL(KILLGE_UINT, 0x41, 2) \
	ALU_OP2_VAL(PRED_SETE_INT, 0x42, 2) \
	ALU_OP2_VAL(PRED_SETGT_INT, 0x43, 2) \
	ALU_OP2_VAL(PRED_SETGE_INT, 0x44, 2) \
	ALU_OP2_VAL(PRED_SETNE_INT, 0x45, 2) \
	ALU_OP2_VAL(KILLE_INT, 0x46, 2) \
	ALU_OP2_VAL(KILLGT_INT, 0x47, 2) \
	ALU_OP2_VAL(KILLGE_INT, 0x48, 2) \
	ALU_OP2_VAL(KILLNE_INT, 0x49, 2) \
	ALU_OP2_VAL(PRED_SETE_PUSH_INT, 0x4A, 2) \
	ALU_OP2_VAL(PRED_SETGT_PUSH_INT, 0x4B, 2) \
	ALU_OP2_VAL(PRED_SETGE_PUSH_INT, 0x4C, 2) \
	ALU_OP2_VAL(PRED_SETNE_PUSH_INT, 0x4D, 2) \
	ALU_OP2_VAL(PRED_SETLT_PUSH_INT, 0x4E, 2) \
	ALU_OP2_VAL(PRED_SETLE_PUSH_INT, 0x4F, 2) \
	ALU_OP2_VAL(DOT4, 0x50, 2) \
	ALU_OP2_VAL(DOT4_IEEE, 0x51, 2) \
	ALU_OP2_VAL(CUBE, 0x52, 2) \
	ALU_OP2_VAL(MAX4, 0x53, 2) \
	ALU_OP2_VAL(GROUP_BARRIER, 0x54, 2) \
	ALU_OP2_VAL(GROUP_SEQ_BEGIN, 0x55, 2) \
	ALU_OP2_VAL(GROUP_SEQ_END, 0x56, 2) \
	ALU_OP2_VAL(SET_MODE, 0x57, 0) \
	ALU_OP2_VAL(SET_CF_IDX0, 0x58, 0) \
	ALU_OP2_VAL(SET_CF_IDX1, 0x59, 0) \
	ALU_OP2_VAL(SET_LDS_SIZE, 0x5A, 2) \
	ALU_OP2_VAL(MUL_INT24, 0x5B, 2) \
	ALU_OP2_VAL(MULHI_INT24, 0x5C, 2) \
	ALU_OP2_VAL(MOVA_GPR_INT, 0x60, 2) \
	ALU_OP2_VAL(ASHR_INT, 0x70, 2) \
	ALU_OP2_VAL(LSHR_INT, 0x71, 2) \
	ALU_OP2_VAL(LSHL_INT, 0x72, 2) \
	ALU_OP2_VAL(LDEXP_64, 0x7A, 2) \
	ALU_OP2_VAL(FRACT_64, 0x7B, 1) \
	ALU_OP2_VAL(PRED_SETGT_64, 0x7C, 2) \
	ALU_OP2_VAL(PRED_SETE_64, 0x7D, 2) \
	ALU_OP2_VAL(PRED_SETGE_64, 0x7E, 2)

#define ALU_OP2_TRANS_ONLY_LIST \
	ALU_OP2_VAL(EXP_IEEE, 0x61, 1) \
	ALU_OP2_VAL(LOG_CLAMPED, 0x62, 1) \
	ALU_OP2_VAL(LOG_IEEE, 0x63, 1) \
	ALU_OP2_VAL(RECIP_CLAMPED, 0x64, 1) \
	ALU_OP2_VAL(RECIP_FF, 0x65, 1) \
	ALU_OP2_VAL(RECIP_IEEE, 0x66, 1) \
	ALU_OP2_VAL(RECIPSQRT_CLAMPED, 0x67, 1) \
	ALU_OP2_VAL(RECIPSQRT_FF, 0x68, 1) \
	ALU_OP2_VAL(RECIPSQRT_IEEE, 0x69, 1) \
	ALU_OP2_VAL(SQRT_IEEE, 0x6A, 1) \
	ALU_OP2_VAL(FLT_TO_INT, 0x6B, 1) \
	ALU_OP2_VAL(INT_TO_FLT, 0x6C, 1) \
	ALU_OP2_VAL(UINT_TO_FLT, 0x6D, 1) \
	ALU_OP2_VAL(SIN, 0x6E, 1) \
	ALU_OP2_VAL(COS, 0x6F, 1) \
	ALU_OP2_VAL(MULLO_INT, 0x73, 2) \
	ALU_OP2_VAL(MULHI_INT, 0x74, 2) \
	ALU_OP2_VAL(MULLO_UINT, 0x75, 2) \
	ALU_OP2_VAL(MULHI_UINT, 0x76, 2) \
	ALU_OP2_VAL(RECIP_INT, 0x77, 1) \
	ALU_OP2_VAL(RECIP_UINT, 0x78, 1) \
	ALU_OP2_VAL(FLT_TO_UINT, 0x79, 1)

#define ALU_OP3_LIST \
	ALU_OP3_VAL(BFE_UINT, 0x04) \
	ALU_OP3_VAL(BFE_INT, 0x05) \
	ALU_OP3_VAL(BFI_INT, 0x06) \
	ALU_OP3_VAL(FMA, 0x07) \
	ALU_OP3_VAL(MULADD_64, 0x08) \
	ALU_OP3_VAL(MULADD_64_M2, 0x09) \
	ALU_OP3_VAL(MULADD_64_M4, 0x0A) \
	ALU_OP3_VAL(MULADD_64_D2, 0x0B) \
	ALU_OP3_VAL(MULADD, 0x10) \
	ALU_OP3_VAL(MULADD_M2, 0x11) \
	ALU_OP3_VAL(MULADD_M4, 0x12) \
	ALU_OP3_VAL(MULADD_D2, 0x13) \
	ALU_OP3_VAL(MULADD_IEEE, 0x14) \
	ALU_OP3_VAL(MULADD_IEEE_M2, 0x15) \
	ALU_OP3_VAL(MULADD_IEEE_M4, 0x16) \
	ALU_OP3_VAL(MULADD_IEEE_D2, 0x17) \
	ALU_OP3_VAL(CNDE, 0x18) \
	ALU_OP3_VAL(CNDGT, 0x19) \
	ALU_OP3_VAL(CNDGE, 0x1A) \
	ALU_OP3_VAL(CNDE_INT, 0x1C) \
	ALU_OP3_VAL(CNDGT_INT, 0x1D) \
	ALU_OP3_VAL(CNDGE_INT, 0x1E)

#define ALU_OP3_TRANS_ONLY_LIST \
	ALU_OP3_VAL(MUL_LIT, 0x0C) \
	ALU_OP3_VAL(MUL_LIT_M2, 0x0D) \
	ALU_OP3_VAL(MUL_LIT_M4, 0x0E) \
	ALU_OP3_VAL(MUL_LIT_D2, 0x0F)

#define TEX_INST_LIST \
	TEX_INST_VAL(VTX_FETCH, 0x00) \
	TEX_INST_VAL(VTX_SEMANTIC, 0x01) \
	TEX_INST_VAL(MEM, 0x02) \
	TEX_INST_VAL(LD, 0x03) \
	TEX_INST_VAL(GET_TEXTURE_INFO, 0x04) \
	TEX_INST_VAL(GET_SAMPLE_INFO, 0x05) \
	TEX_INST_VAL(GET_COMP_TEX_LOD, 0x06) \
	TEX_INST_VAL(GET_GRADIENTS_H, 0x07) \
	TEX_INST_VAL(GET_GRADIENTS_V, 0x08) \
	TEX_INST_VAL(GET_LERP, 0x09) \
	TEX_INST_VAL(KEEP_GRADIENTS, 0x0A) \
	TEX_INST_VAL(SET_GRADIENTS_H, 0x0B) \
	TEX_INST_VAL(SET_GRADIENTS_V, 0x0C) \
	TEX_INST_VAL(PASS, 0x0D) \
	TEX_INST_VAL(SET_CUBEMAP_INDEX, 0x0E) \
	TEX_INST_VAL(FETCH4, 0x0F) \
	TEX_INST_VAL(SAMPLE, 0x10) \
	TEX_INST_VAL(SAMPLE_L, 0x11) \
	TEX_INST_VAL(SAMPLE_LB, 0x12) \
	TEX_INST_VAL(SAMPLE_LZ, 0x13) \
	TEX_INST_VAL(SAMPLE_G, 0x14) \
	TEX_INST_VAL(SAMPLE_G_L, 0x15) \
	TEX_INST_VAL(SAMPLE_G_LB, 0x16) \
	TEX_INST_VAL(SAMPLE_G_LZ, 0x17) \
	TEX_INST_VAL(SAMPLE_C, 0x18) \
	TEX_INST_VAL(SAMPLE_C_L, 0x19) \
	TEX_INST_VAL(SAMPLE_C_LB, 0x1A) \
	TEX_INST_VAL(SAMPLE_C_LZ, 0x1B) \
	TEX_INST_VAL(SAMPLE_C_G, 0x1C) \
	TEX_INST_VAL(SAMPLE_C_G_L, 0x1D) \
	TEX_INST_VAL(SAMPLE_C_G_LB, 0x1E) \
	TEX_INST_VAL(SAMPLE_C_G_LZ, 0x1F)

#define VTX_INST_LIST \
	VTX_INST_VAL(FETCH, 0x00) \
	VTX_INST_VAL(SEMANTIC, 0x01) \
	VTX_INST_VAL(BUFINFO, 0x0E)

#define MEM_INST_LIST \
	} \
	MEM_INST_VAL(RD_SCRATCH, 0x00) \
	MEM_INST_VAL(RD_REDUC, 0x01) \
	MEM_INST_VAL(RD_SCATTER, 0x02) \
	MEM_INST_VAL(LOCAL_DS_WRITE, 0x04) \
	MEM_INST_VAL(LOCAL_DS_READ, 0x05) \
	MEM_INST_VAL(DS_GLOBAL_WRITE, 0x06) \
	MEM_INST_VAL(DS_GLOBAL_READ, 0x07) \
	MEM_INST_VAL(MEM_GDS, 0x08) \
	MEM_INST_VAL(TF_WRITE, 0x09)

#undef CF_INST_VAL
#define CF_INST_VAL(inst, value) inst = value,
enum class CF_INST : u32 { CF_INST_LIST };

#undef CF_EXP_INST_VAL
#define CF_EXP_INST_VAL(inst, value) inst = value,
enum class CF_INST_EXP : u32 { CF_EXP_INST_LIST };

#undef CF_ALU_INST_VAL
#define CF_ALU_INST_VAL(inst, value) inst = value,
enum class CF_INST_ALU : u32 { CF_ALU_INST_LIST };

#undef ALU_OP2_VAL
#define ALU_OP2_VAL(inst, value, operands) inst = value,
enum class ALU_OP2_INST : u32 { ALU_OP2_LIST ALU_OP2_TRANS_ONLY_LIST };

#undef ALU_OP3_VAL
#define ALU_OP3_VAL(inst, value) inst = value,

enum class ALU_OP3_INST : u32 { ALU_OP3_LIST ALU_OP3_TRANS_ONLY_LIST };

#undef TEX_INST_VAL
#define TEX_INST_VAL(inst, value) inst = value,

enum class TEX_INST : u32 { TEX_INST_LIST };

#undef VTX_INST_VAL
#define VTX_INST_VAL(inst, value) inst = value,

enum class VTX_INST : u32 { VTX_INST_LIST };

enum class ALU_OMOD : u32 {
	OFF = 0x0,
	M2 = 0x1,
	M4 = 0x2,
	D2 = 0x3,
};

enum class EXECUTE_MASK_OP : u32 {
	DEACTIVATE = 0x0,
	BREAK = 0x1,
	CONTINUE = 0x2,
	KILL = 0x3,
};

enum ExportType : u32 {
	EXPORT_TYPE_PIX = 0x0000,
	PIX0 = EXPORT_TYPE_PIX | 0x00,
	PIX1,
	PIX2,
	PIX3,
	EXPORT_TYPE_POS = 0x2000,
	POS0 = EXPORT_TYPE_POS | 0x3C,
	POS1,
	POS2,
	POS3,
	EXPORT_TYPE_PARAM = 0x4000,
	PARAM0 = EXPORT_TYPE_PARAM | 0x00,
	PARAM1,
	PARAM2,
	PARAM3,
	PARAM4,
	PARAM5,
	PARAM6,
	PARAM7,
	PARAM8, /* .. 31 */
	EXPORT_TYPE_MASK = 0xF000,
};

enum class BankSwizzle : u32 {
	ALU_VEC_012 = 0x0,
	ALU_VEC_021 = 0x1,
	ALU_VEC_120 = 0x2,
	ALU_VEC_102 = 0x3,
	ALU_VEC_201 = 0x4,
	ALU_VEC_210 = 0x5,

	ALU_SCL_210 = 0x0,
	ALU_SCL_122 = 0x1,
	ALU_SCL_212 = 0x2,
	ALU_SCL_221 = 0x3,
};

enum CoordType : u32 {
	TEX_UNNORMALIZED,
	TEX_NORMALIZED,
};

enum KCacheMode : u32 {
	CF_KCACHE_BANK_LOCK_NONE = 0,
	CF_KCACHE_BANK_LOCK_1 = 0x1,
	CF_KCACHE_BANK_LOCK_2 = 0x2,
};

#undef CF_INST_VAL
#define CF_INST_VAL(inst, value) \
	case CF_INST::inst: return #inst;
static inline const char *GetInstName(CF_INST inst) {
	switch (inst) {
		CF_INST_LIST
	default: return "UNKNOWN";
	}
}

#undef CF_EXP_INST_VAL
#define CF_EXP_INST_VAL(inst, value) \
	case CF_INST_EXP::inst: return #inst;
static inline const char *GetInstName(CF_INST_EXP inst) {
	switch (inst) {
		CF_EXP_INST_LIST
	default: return "UNKNOWN";
	}
}

#undef CF_ALU_INST_VAL
#define CF_ALU_INST_VAL(inst, value) \
	case CF_INST_ALU::inst: return #inst;
static inline const char *GetInstName(CF_INST_ALU inst) {
	switch (inst) {
		CF_ALU_INST_LIST
	default: return "UNKNOWN";
	}
}

#undef ALU_OP2_VAL
#define ALU_OP2_VAL(inst, value, operands) \
	case ALU_OP2_INST::inst: return #inst;
static inline const char *GetInstName(ALU_OP2_INST inst) {
	switch (inst) {
		ALU_OP2_LIST
		ALU_OP2_TRANS_ONLY_LIST
	default: return "UNKNOWN";
	}
}

#undef ALU_OP3_VAL
#define ALU_OP3_VAL(inst, value) \
	case ALU_OP3_INST::inst: return #inst;
static inline const char *GetInstName(ALU_OP3_INST inst) {
	switch (inst) {
		ALU_OP3_LIST
		ALU_OP3_TRANS_ONLY_LIST
	default: return "UNKNOWN";
	}
}

#undef TEX_INST_VAL
#define TEX_INST_VAL(inst, value) \
	case TEX_INST::inst: return #inst;
static inline const char *GetInstName(TEX_INST inst) {
	switch (inst) {
		TEX_INST_LIST
	default: return "UNKNOWN";
	}
}

#undef ALU_OP2_VAL
#define ALU_OP2_VAL(inst, value, operands) \
	case ALU_OP2_INST::inst: return operands;
static inline int GetOperandsCount(ALU_OP2_INST inst) {
	switch (inst) {
		ALU_OP2_LIST
		ALU_OP2_TRANS_ONLY_LIST
	default: return 0;
	}
}

#undef ALU_OP2_VAL
#define ALU_OP2_VAL(inst, value, operands) \
	case ALU_OP2_INST::inst: return true;
static inline bool ALU_OP_IS_TRANS(ALU_OP2_INST inst) {
	switch (inst) {
		ALU_OP2_TRANS_ONLY_LIST
	default: return false;
	}
}

#undef ALU_OP3_VAL
#define ALU_OP3_VAL(inst, value) \
	case ALU_OP3_INST::inst: return true;
static inline bool ALU_OP_IS_TRANS(ALU_OP3_INST inst) {
	switch (inst) {
		ALU_OP3_TRANS_ONLY_LIST
	default: return false;
	}
}
